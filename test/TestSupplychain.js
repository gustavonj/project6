// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originBrewerieID = accounts[1]
    const originBrewerieName = "John Doe"
    const originBrewerieInformation = "Yarray Valley"
    const originBrewerieLatitude = "-38.239770"
    const originBrewerieLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productStyle = "Pielsen"
    var alcoholTax = 4
    const productPrice = web3.toWei(1, "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const storeID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Brewerie: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Store: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function brewsItem() that allows a Brewerie to brews beer", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as Brewed by calling function brewsItem() 
        await supplyChain.addBrewerie(originBrewerieID);
        transaction = await supplyChain.brewsItem(upc, originBrewerieID, originBrewerieName, originBrewerieInformation, originBrewerieLatitude, originBrewerieLongitude, productNotes, productStyle, alcoholTax)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originBrewerieID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originBrewerieID, 'Error: Missing or Invalid originBrewerieID')
        assert.equal(resultBufferOne[4], originBrewerieName, 'Error: Missing or Invalid originBrewerieName')
        assert.equal(resultBufferOne[5], originBrewerieInformation, 'Error: Missing or Invalid originBrewerieInformation')
        assert.equal(resultBufferOne[6], originBrewerieLatitude, 'Error: Missing or Invalid originBrewerieLatitude')
        assert.equal(resultBufferOne[7], originBrewerieLongitude, 'Error: Missing or Invalid originBrewerieLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(transaction.logs[0].event, 'Brewed');
    }) 

    // 2nd Test
    it("Testing smart contract function bottleUp() that allows a Brewerie to bottle up beer", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Processed()
        var event = supplyChain.Bottled()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Bottled by calling function bottleUp()
        await supplyChain.bottleUp(upc,  {from: originBrewerieID})
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
        
    })    

    // 3rd Test
    it("Testing smart contract function packagingItem() that allows a Brewerie to packaging Beer", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Packaged()
        var event = supplyChain.Packaged()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Packaged by calling function packagingItem()
        await supplyChain.packagingItem(upc, productPrice,  {from: originBrewerieID})
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid price')
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
        
    })    

    // 4th Test
    it("Testing smart contract function buyPackageItem() that allows a Distributor to buy a packaged item", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as Sold by calling function buyPackageItem()
        await supplyChain.addDistributor(distributorID);
        transaction = await supplyChain.buyPackageItem(upc, {from: distributorID, value: web3.toWei(1, "ether")} )
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], distributorID, 'Error: Invalid ownerID')
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid distributorID')
        assert.equal(transaction.logs[0].event, 'Sold');
    })    

    // 5th Test
    it("Testing smart contract function enableForOrder() that allows a distributor to enabled for order", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        const newProductPrice =  web3.toWei(2, "ether");
        
        // Watch the emitted event EnabledForOrder()
        var event = supplyChain.EnabledForOrder()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as EnabledForOrder by calling function enableForOrder()
        await supplyChain.enableForOrder(upc, newProductPrice, {from: distributorID} )
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[4], newProductPrice, 'Error: Invalid price')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
    })    

    // 6th Test
    it("Testing smart contract function orderItem() that allows a store to order beer", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        
        // Mark an item as Ordered by calling function orderItem()
        await supplyChain.addStore(storeID);
        transaction = await supplyChain.orderItem(upc, {from: storeID, value:  web3.toWei(2, "ether")} )
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], storeID, 'Error: Invalid ownerID')
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[7], storeID, 'Error: Invalid storeID')
        assert.equal(transaction.logs[0].event, 'Ordered');
    })    

    // 7th Test
    it("Testing smart contract function shipItem() that allows a distributor to mark beer shipped", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Shipped()
        var event = supplyChain.Shipped()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Shipped by calling function shipItem()
        await supplyChain.shipItem(upc, {from: distributorID} )
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
    })    

    // 8th Test
    it("Testing smart contract function receiveItem() that allows a store to mark beer received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Received()
        var event = supplyChain.Received()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Received by calling function receiveItem()
        await supplyChain.receiveItem(upc, {from: storeID} )
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
    })    

    // 9th Test
    it("Testing smart contract function putsItemOnSale() that allows a store to put item on sale", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        const newPrice = web3.toWei(3, "ether");
        
        // Watch the emitted event ForSale()
        var event = supplyChain.ForSale()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as ForSale by calling function putsItemOnSale()
        await supplyChain.putsItemOnSale(upc, newPrice, {from: storeID} )
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[4], newPrice, 'Error: Invalid price')
        assert.equal(resultBufferTwo[5], 8, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
    })    

    // 10th Test
    it("Testing smart contract function buyItem() that allows a consumer to buy beer", async() => {
        const supplyChain = await SupplyChain.deployed()
       
        // Mark an item as Purchased by calling function buytIem()
        await supplyChain.addConsumer(consumerID);
        transaction = await supplyChain.buyItem(upc, {from: consumerID, value:  web3.toWei(3, "ether")} )
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], consumerID, 'Error: Invalid ownerID')
        assert.equal(resultBufferTwo[5], 9, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid storeID')
        assert.equal(transaction.logs[0].event, 'Purchased');
    })

    // 11th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid sku');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid upc');
        assert.equal(resultBufferOne[2], consumerID, 'Error: Invalid ownerID');
        assert.equal(resultBufferOne[3], originBrewerieID, 'Error: Invalid originBrewerieID');
        assert.equal(resultBufferOne[4], originBrewerieName, 'Error: Invalid originBrewerieName');
        assert.equal(resultBufferOne[5], originBrewerieInformation, 'Error: Invalid originBrewerieInformation');
        assert.equal(resultBufferOne[6], originBrewerieLatitude, 'Error: Invalid originBrewerieLatitude');
        assert.equal(resultBufferOne[7], originBrewerieLongitude, 'Error: Invalid originBrewerieLongitude');
        
    })

    // 12th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        
        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid sku');
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid upc');
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid productID');
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid productNotes');
        assert.equal(resultBufferTwo[4], web3.toWei(3, "ether"), 'Error: Invalid productPrice');
        assert.equal(resultBufferTwo[5], 9, 'Error: Invalid itemState');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid distributorID');
        assert.equal(resultBufferTwo[7], storeID, 'Error: Invalid storeID');
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid consumerID');
    })


    // 13th Test
    it("Testing smart contract function fetchProductDetails() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const result = await supplyChain.fetchProductDetails.call(upc);
        
        // Verify the result set:
        assert.equal(result[0], sku, 'Error: Invalid sku');
        assert.equal(result[1], upc, 'Error: Invalid upc');
        assert.equal(result[2], originBrewerieName, 'Error: Invalid originBrewerieName');
        assert.equal(result[3], productID, 'Error: Invalid productID');
        assert.equal(result[4], productNotes, 'Error: Invalid productNotes');
        assert.equal(result[5], productStyle, 'Error: Invalid productStyle');
        assert.equal(result[6], alcoholTax, 'Error: Invalid alcoholTax');
        assert.equal(result[7], web3.toWei(3, "ether"), 'Error: Invalid productPrice');
    })

});

